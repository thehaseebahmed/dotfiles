#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

main() {
    {{ if eq .osid "darwin" -}}
    app_installs_macos
    {{ end -}}

    app_codium_install_exts
}

app_check_installed() {
    local app_name="${1:-}"

    exists_or_exit app_name

    local app_exists=false

    {{ if eq .osid "darwin" -}}
        app_exists=$(eval "brew list \"$app_name\" >/dev/null 2>&1")
    {{ end -}}

    if $app_exists; then
        warn "$app_name is already installed."
        return 1
    else
        return 0
    fi
}

app_codium_install_exts() {
    if ! eval "command -v codium >/dev/null 2>&1"; then
        error "VS Codium is not installed! Could not install extensions."
        return 1
    fi

    {{ range .packages.vscodium_extensions -}}
    info "Installing VS Codium extension: {{ . }}"
    codium --install-extension {{ . | quote }} >/dev/null 2>&1 || error "Failed to install extension: {{ . | quote }}"
    {{ end -}}
}

app_install() {
    local app_name="${1:-}"
    local is_cask=false

    exists_or_exit app_name
    has_flag "--cask" "$@" && is_cask=true

    app_check_installed "$app_name" || return 0

    info "Installing $app_name..."

    {{ if eq .osid "darwin" -}}
        if $is_cask; then
            brew install --cask "$app_name"
        else
            brew install "$app_name"
        fi

        return 0
    {{ end -}}
    
    error "Unsupported OS for installing $app_name. Please install it manually."
    return 1
}

app_installs_macos() {
    {{ range .packages.darwin.brews -}}
    app_install {{ . | quote }} || error "Failed to install brew: {{ . | quote }}"
    {{ end -}}

    {{ range .packages.darwin.casks -}}
    app_install {{ . | quote }} --cask || error "Failed to install cask: {{ . | quote }}"
    {{ end -}}
}

# Assertion Helpers
exists_or_exit() {
    local var_name="$1"
    local var_value="${!var_name}"

    if ! exists "$var_value"; then
        error "Variable '$var_name' is not set or is empty. Exiting."
        exit 1
    fi
}

# File Helpers
fexists() { [[ -e "$1" ]]; }

# Misc
has_flag() {
  local flag="$1"
  shift
  for arg in "$@"; do
    if [ "$arg" == "$flag" ]; then
      return 0
    fi
  done
  return 1
}

safe_run() {
    local safe_mode="${1:-true}"
    shift

    if eq "$safe_mode" "false"; then    
        eval "$@"
    else
        echo "[DRY-RUN] $*"
    fi
}

# String
contains() {
    local value="$1"
    shift

    local to_find=("$@")
    local pattern=$(IFS='|'; echo "${to_find[*]}")
    [[ "$value" =~ ($pattern) ]]
}

# Output Helpers
info()  { echo "[INFO] $1"; } #gum style --foreground "#9bcefd" --bold "[INFO] $1"; }
warn()  { echo "[WARN] $1"; } #gum style --foreground "#ffd166" --bold "[WARN] $1"; }
error() { echo "[ERROR] $1"; } #gum style --foreground "#e0005a" --bold "[ERROR] $1"; }
ok()    { echo "[OK] $1"; } #gum style --foreground "#829e2e" --bold "[OK] $1"; }

# Variable Helpers
exists() { [[ -n "$1" ]]; }
eq() { [[ "$1" == "$2" ]]; }

main "$@"