#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

main() {
    setup_nerd_font
    setup_vscodium
}

app_check_installed() {
    local app_name="${1:-}"
    local check_cmd="${2:-}"

    exists_or_exit app_name
    exists_or_exit check_cmd

    if eval "$check_cmd"; then
        ok "$app_name is already installed."
        return 1
    else
        return 0
    fi
}

app_install() {
    local app_name="${1:-}"
    local check_cmd="${2:-}"
    local is_cask=$(has_flag "--cask" "$@")

    exists_or_exit app_name
    exists_or_exit check_cmd

    app_check_installed "$app_name" "$check_cmd" || return 0

    info "Installing $app_name..."

    if os_is_macos; then
        if $is_cask; then
            brew install --cask "$app_name"
        else
            brew install "$app_name"
        fi
    else
        error "Unsupported OS for installing $app_name. Please install it manually."
        exit 1
    fi
}

os_is_macos() {
    command -v brew >/dev/null 2>&1
}

setup_nerd_font() {
    local font="font-zed-mono-nerd-font"
    app_install "$font" "brew list | grep $font >/dev/null 2>&1"
}

setup_vscodium() {
    app_install "vscodium" "command -v codium >/dev/null 2>&1" --cask

    local extensions=(
        "angular.ng-template"
        "bradlc.vscode-tailwindcss"
        "catppuccin.catppuccin-vsc-pack"
        "christian-kohler.npm-intellisense"
        "dbaeumer.vscode-eslint"
        "esbenp.prettier-vscode"
        "github.vscode-github-actions"
        "hashicorp.terraform"
        "illixion.vscode-vibrancy-continued"
        "ms-playwright.playwright"
        "ms-vscode.test-adapter-converter"
        "redhat.vscode-yaml"
        "wakatime.vscode-wakatime"
        "yoavbls.pretty-ts-errors"
    )

    for extension in "${extensions[@]}"; do
        info "Installing VS Codium extension: $extension"
        codium --install-extension "$extension" >/dev/null 2>&1 || warn "Failed to install extension: $extension"
    done
}

# Assertion Helpers
exists_or_exit() {
    local var_name="$1"
    local var_value="${!var_name}"

    if ! exists "$var_value"; then
        error "Variable '$var_name' is not set or is empty. Exiting."
        exit 1
    fi
}

# File Helpers
fexists() { [[ -e "$1" ]]; }

# Misc
has_flag() {
  local flag="$1"
  shift
  for arg in "$@"; do
    if [ "$arg" == "$flag" ]; then
      return 0
    fi
  done
  return 1
}

safe_run() {
    local safe_mode="${1:-true}"
    shift

    if eq "$safe_mode" "false"; then    
        eval "$@"
    else
        echo "[DRY-RUN] $*"
    fi
}

# String
contains() {
    local value="$1"
    shift

    local to_find=("$@")
    local pattern=$(IFS='|'; echo "${to_find[*]}")
    [[ "$value" =~ ($pattern) ]]
}

# Output Helpers
info()  { echo "[INFO] $1"; } #gum style --foreground "#9bcefd" --bold "[INFO] $1"; }
warn()  { echo "[WARN] $1"; } #gum style --foreground "#ffd166" --bold "[WARN] $1"; }
error() { echo "[ERROR] $1"; } #gum style --foreground "#e0005a" --bold "[ERROR] $1"; }
ok()    { echo "[OK] $1"; } #gum style --foreground "#829e2e" --bold "[OK] $1"; }

# Variable Helpers
exists() { [[ -n "$1" ]]; }
eq() { [[ "$1" == "$2" ]]; }

main "$@"